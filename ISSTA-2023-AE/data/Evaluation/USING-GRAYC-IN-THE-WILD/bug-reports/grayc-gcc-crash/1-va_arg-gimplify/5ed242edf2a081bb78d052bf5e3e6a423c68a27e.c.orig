/* PR tree-optimization/56205 */

#include <stdarg.h>

int a, b;
char c[128];

__attribute__((noinline, noclone)) static void
f1 (const char *fmt, ...)
{
  va_list ap;
  asm volatile ("" : : : "memory");
  if (__builtin_strcmp (fmt, "%s %d %s") != 0)
    __builtin_abort ();
  va_start (ap, fmt);
  if (__builtin_strcmp (va_arg (ap, const char *), "foo") != 0
      || va_arg (ap, int) != 1
      || __builtin_strcmp (va_arg (ap, const char *), "bar") != 0)
    __builtin_abort ();
  va_end (ap);
}

__attribute__((noinline, noclone)) static void
f2 (const char *fmt, va_list ap)
{
  asm volatile ("" : : : "memory");
  if (__builtin_strcmp (fmt, "baz") != 0
      || __builtin_strcmp (va_arg (ap, const char *), "foo") != 0
      || va_arg (ap, double) != 12.0
      || va_arg (ap, int) != 26)
    __builtin_abort ();
}

static void
f3 (int x, char const *y, va_list z)
{
  f1 ("%s %d %s", x ? "" : "foo", ++a, (y && *y) ? "bar" : "");
  if (y && *y)
    f2 (y, z);
}

__attribute__((noinline, noclone)) void
f4 (int x, char const *y, ...)
{
  va_list z;
  va_start (z, y);
  if (!x && *c == '\0')
    ++b;
  f3 (x, y, z);
  va_end (z);
}

int
main ()
{
int ir[4] = {0,1,2,3};
double foo[6];
struct foo x;
int j = 0;
int i = 0;
int i;
struct a g;
int count = 0;
int r;
int h = d != 10;
int *i = 0;
int addr;
char *e;
const int *blist;
int list[32];
int *b = (int *) a;
int *d;
double result1 = (35.7 * 100.0) / 45.0;
double result2 = (x * 100.0) / y;
double t;
const unsigned short *f[36];
const unsigned short **i = &f[0];
struct S o = { 1, 1 };
struct T p = { 1, 1 };
unsigned long long a = x / y;
unsigned long long b = x % y;
struct x s;
int a = 0;
struct S v;
struct U v;
struct U w;
int intType;
struct Foo *f = (struct Foo *)x;
struct Foo f;
const unsigned top[2] = {0xff7a7a7a, 0xff7a7a7a};
const unsigned left = 0xff7b7b7b;
unsigned long long aLL = 1000000000000000000ULL;
int x = 1;
int y = 2;
float x[8][2][8][2];
unsigned int i;
long int xx = *y & 255;
long int xx = *y & 65535;
short int xx = *y & 255;
long int y[] = {-1, 16000};
short int yw[] = {-1, 16000};
long s = 1;
long d[7] = { 975, 975, 975, 975, 975, 975, 975 };
int b = 0;
char str[] = "foo { xx }";
char *ptr = str + 5;
char *c1 = "foo";
char *c2 = "foo";
unsigned char i;
int j;
unsigned int x[256];
struct tiny x;
long x = va_arg (ap, long);
struct tiny x[3];
unsigned long count = 8;
char buf[64];
const char *p;
double v[n];
long long r;
char *formatc;
char *f = "0123456789abcdef";
signed char y = -1;
unsigned char y = -1;
char *end;
int fixed;
int temp1 = 2;
int temp2 = 1;
struct large temp3;
struct large temp4;
struct S s = { 6, 12, { 1, 2, 3, 4, 5, 6 },		 { 7, { 8, 9, 10, 11, 12, 13, 14, 15 } } };
void *j[] = {&&x, &&y, &&z};
int t;
int au[] = {2080555007, 0};
struct a az = {1, 3};
int ba[] = {5, 5, 9, 8, 1, 0, 5, 5, 9, 8, 1, 0,                5, 5, 9, 8, 1, 0, 5, 5, 9, 8, 1};
int a[] = {8, 2, 8, 2, 8, 2, 8};
int b[] = {1027239, 8, 1, 7, 9, 2, 9, 4, 4, 2, 8, 1, 0, 4, 4, 2,               4,       4, 2, 9, 2, 9, 8, 1, 7, 9, 2, 9, 4, 4, 2};
struct a bc;
struct a bd = {5};
int d[20] = {1, 9, 7, 7, 8, 4, 4, 4, 4, 8, 1, 9, 7, 7, 8, 4, 4, 4, 4};
struct a be;
struct a bf = {908, 5, 3};
int bm[] = {0};
int bn[] = {5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5,                      2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2,                      2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2};
struct a a[] = {3440025416, 2, 8, 4, 2, 8, 4, 4, 2, 8, 4};
struct a b = {3075920};
struct S m = { 5, 0, -5, 9, 5 };
int nResult;
int b=0;
int i = -1;
struct b k = {};
int x = a;
int x;
unsigned int m = n;
struct T *p = s;
char j;
void *buf[5];
void *volatile q = p;
long long blkoffset = _RNDDOWN(offset, (long long )pxp->blksz);
unsigned int diff = (unsigned int)(offset - blkoffset);
unsigned int blkextent = _RNDUP(diff + extent, pxp->blksz);
long long xx;
unsigned short int x = 0;
unsigned short int y = 10;
;
st *next = 0;
int nIndx;
int y = 0;
const int *p = &x;
__complex double dc;
double *dp = &(__real dc);
unsigned b = 0;
int my_int = 924;
unsigned int result;
int ab = 0;
struct a ae;
const char d = 0;
const char c = 0;
struct S e = c[0];
int p = b || a;
signed char i;
short b;
int x = 0 % a++;
struct T *d;
struct S e = a;
struct S *c = 0;
struct A a;
struct B b;
int exit_code = 0;
vector(8, short) v0 = {one, 1, 2, 3, 4, 5, 6, 7};
vector(8, short) v1;
vector(4, float) f0 = {1., 2., 3., 4.};
vector(2, double) d0 = {1., 2.};
struct S s = { 1, 2, 3, 4 };
void **w = u;
void *t[] = { u[2], u[4] };
int s[] = { 7, 8, 9, 10, 11, 12 };
const u32 *tab;
int b = a[0];
int ch;
struct stuff x = {0, 0, 0, 0, 0, NULL, 0};
double darg;
int iarg;
int flag = 0;
struct S d = { 0x123456 };
unsigned int *vramPtr;
int width;
int f = 0;
int *ip = &i;
int *i3p = &i3;
int *i4p = &i4;
char b[SIZE];
int *c = &b;
int tmp[2];
int (*compare1) (int);
int elt2;
int a = 128;
unsigned char a = 128;
long long a = 0x80000000LL;
unsigned int a = 0x80000000;
register unsigned int z;
char c[16];
union bf_or_uint32 bfin;
char cin[] = { 0x83, 0x85, 0x87, 0x89 };
char x;
int *__restrict q;
int *__restrict r;
float bdm[4][2][4][2];
struct mystruct *user = data;
struct mystruct a;
struct x a = {x, y, z};
struct x b = {x, y, z};
struct x *c = &b;
char s[32] = { 'f', 'o', 'o', 'b', 'a', 'r', 0 };
char *arg = "test1234/";
unsigned x = ~0;
long l2;
unsigned short us;
unsigned long ul;
short s2;
struct S s[2];
unsigned char cy;
unsigned short sy;
unsigned int iy;
unsigned long ly;
unsigned long long Ly;
struct S r = { 6, 8, -8, -5 };
volatile long long l1 = 1;
volatile long long l2 = -1;
volatile long long l3 = -1;
unsigned long long y = (x >> 31ULL) & 1ULL;
long long y = (x >> 31LL) & 1LL;
int c;
float *q = (float *)p;
float f = 1.0;
int **p;
long int a = 0x4272AL;
volatile struct s rec = { &rec };
struct s s = { 1, 2, 3, 4 };
struct S *b = (struct S *)((char *)q + sizeof (int));
struct S *b = &((struct R *)q)->a;
int mask = -1 << bitcount;
unsigned short u;
char buf[18];
unsigned short s[18];
unsigned char c[18] = "abcdefghijklmnopq";
u8 outbuf[32] = "buffer     ";
u8 inbuf[32] = "\f";
int n = 0;
int x[n % 1000 + 1];
unsigned align;
int h = 0;
unsigned int k = 0;
int l[8];
void *res;
double oldrho;
double beta = 0.0;
double work = 1.0;
double rho = work * work;
double x = 1.0;
double y = 2.0;
unsigned int x = (short)y;
void *p;
int *q[40];
__SIZE_TYPE__ start;
int h = 5;
unsigned e = 2;
unsigned timeout = 0;
int f = ~e / 7;
struct X x;
unsigned long g;
int b;
int z = *x;
int k;
int Y = 32;
int a;
struct xx s = {0, &s, 23};
int e;
float error;
float step;
const char *end;
int len = 1;
int c = *p;
const char *input = "Bbb:";
char c;
char c2;
char *pc = &c;
char *pc2 = &c2;
int *pi = &i;
int I;
float F;
int year=548;
unsigned int h;
short r = *a;
struct d l;
int z = sizeof (v4flt) / sizeof (float);
unsigned m = sizeof (v4flt) - 1;
float t = src[0][j];
char *cptr;
float e = (float) i + 11 * (float) i + (float) i + 12 * (float) i;
unsigned int u;
struct b x;
short x = *p++ << 16;
char *p = "";
int *t = x->sc;
int t1 = t[0];
int t2 = t[1];
int t3 = t[2];
int a0 = x->a[0];
int a1 = x->a[1];
struct S s;
struct S0 e = { 0, 0, 0, 0, 0, 0, 1, 0, 1 };
register int i;
int all = writes->all;
int nonscalar = writes->nonscalar;
struct write_data writes;
struct table_elt elt;
unsigned long *temp = end - 1;
unsigned long a[5];
unsigned q;
char tmp[3 * sizeof(num)];
char sign;
char locase;
int need_pfx = ((spec.flags & 64) && spec.base != 10);
int field_width = spec.field_width;
int precision = spec.precision;
int mask = spec.base - 1;
int shift = 3;
struct printf_spec spec;
char buf[10];
long i;
long vec;
long l[3];
int a[4] = { 8, 9, 10, 11 };
struct S s = { 1, 2, 3, &a[0] };
struct T u = { 0, 0, &a[3] };
struct a k = {};
int size = sizeof (int);
struct A d;
unsigned char b;
double e;
double f;
double g;
int *p;
struct S t = { 0, -3161L };
float x[4];
float temp;
int foo = 2;
int tab[2];
struct S *p;
long long   x;
int         n;
long long k = b;
int l;
int *m = &e;
struct packed_ushort rv;
struct source s;
int n;
unsigned int l[288];

  asm volatile ("" : : : "memory");
  f4 (0, "baz", "foo", 12.0, 26);
  if (a != 1 || b != 1)
    __builtin_abort ();
  return 0;
}
