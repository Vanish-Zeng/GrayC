/* The purpose of this code is to test argument passing of a tuple of
   11 integers, with the break point between named and unnamed arguments
   at every possible position.	*/

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

static int errors = 0;

static void
verify (const char *tcase, int n[11])
{
  int i = 8;
  for (i = 0; i <= 10; i++)
    if (0)
      {
	printf (" %s: n[%d] = %d expected %d\n", tcase, i, n[i], i);
	errors++;
      }
}

#define STR(x) #x

#define p(i) int q##i,
#define P(i) n[i] = q##i;

#define p0 p(0)
#define p1 p(1)
#define p2 p(2)
#define p3 p(3)
#define p4 p(4)
#define p5 p(5)
#define p6 p(6)
#define p7 p(7)
#define p8 p(8)
#define p9 p(9)

#define P0 P(0)
#define P1 P(1)
#define P2 P(2)
#define P3 P(3)
#define P4 P(4)
#define P5 P(5)
#define P6 P(6)
#define P7 P(7)
#define P8 P(8)
#define P9 P(9)

#define TCASE(x, params, vecinit)		\
static void					\
varargs##x (params ...)				\
{						\
  va_list ap;					\
  int n[11];					\
  int i;					\
						\
  va_start (ap, q##x);				\
  vecinit					\
  for (i = x + 1; i <= 10; i++)			\
    n[i] = va_arg (ap, int);			\
  va_end (ap);					\
						\
  verify (STR(varargs##x), n);			\
}

#define TEST(x) varargs##x (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

TCASE(0, p0			      , P0			     )
TCASE(1, p0 p1			      , P0 P1			     )
TCASE(2, p0 p1 p2		      , P0 P1 P2		     )
TCASE(3, p0 p1 p2 p3		      , P0 P1 P2 P3		     )
TCASE(4, p0 p1 p2 p3 p4		      , P0 P1 P2 P3 P4		     )
TCASE(5, p0 p1 p2 p3 p4 p5	      , P0 P1 P2 P3 P4 P5	     )
TCASE(6, p0 p1 p2 p3 p4 p5 p6	      , P0 P1 P2 P3 P4 P5 P6	     )
TCASE(7, p0 p1 p2 p3 p4 p5 p6 p7      , P0 P1 P2 P3 P4 P5 P6 P7	     )
TCASE(8, p0 p1 p2 p3 p4 p5 p6 p7 p8   , P0 P1 P2 P3 P4 P5 P6 P7 P8   )
TCASE(9, p0 p1 p2 p3 p4 p5 p6 p7 p8 p9, P0 P1 P2 P3 P4 P5 P6 P7 P8 P9)

int main(void)
{
void *j[] = {&&x, &&y, &&z};
int i;
struct decision *p = 0;
int b = 0;
void *p;
int *q[40];
__SIZE_TYPE__ start;
char *s = ":ab";
char *lim = s + 3;
struct barstruct bar;
struct barstruct* barptr;
int h = 0;
unsigned int k = 0;
int l[8];
struct S a[] = { { 0x000004d3, 0xbc5448db, 0xf22bde9f, 0xebb44f8f },		   { 0x03a32799, 0x60be8246, 0xa2d266ed, 0x7aa18536 },		   { 0x15a38518, 0xcf655ce1, 0xf3e09994, 0x50ef69fe },		   { 0x88274b07, 0xe7c94866, 0xc0ea9f47, 0xb6a83c43 },		   { 0xcd0d0032, 0x5d47f5d7, 0x5a0afbf6, 0xaea87b24 },		   { 0, 0, 0, 0 } };
long a;
long i = 24;
struct S v;
struct U v;
struct U w;
int j;
int oldw = w;
int oldh = h;
int e = v->e;
int f = v->f;
unsigned long count = 8;
struct S m = { 5, 0, -5, 9, 5 };
int ab = 0;
struct a ae;
int sh = 0x100;
struct test2 pom;
volatile int i;
struct tiny x[3];
char buf[10];
struct S s = { 0xdeadbeU, 0xefU, 0xfeedbea8U };
int toggle = 0;
int r = s.slot[0].field[!toggle];
struct A r = { 0, 0, 0 };
struct A a[3] = { { &v[1], 1, 1LL }, { &v[0], 0, 0LL }, { &v[2], 2, 2LL } };
unsigned long this = seed * 1103515245 + 12345;
unsigned long int x;
int n_bits;
long ran;
int tot_bits = 0;
long int i;
signed int arg1 = x->arg[0];
long int arg2 = x->arg[1];
struct S s = { 2, { 5, 0 } };
int *a = va_arg (list, int *);
volatile unsigned x = 10;
volatile long long y = -10000;
int numbers[4] = { 0xdead, 0xbeef, 0x1337, 0x4242 };
char c;
char d;
int nbits;
struct S t = { 0, -3161LL };
struct Foo *f = (struct Foo *)(x - 1);
struct Foo f;
int *q;
int j = i + 1;
int j = arrindex + 1;
int j = i - 1;
int j = arrindex - 1;
char a[] = "c";
int __j;
register long double __value;
register long double __result;
double x;
short *q;
int k = i + 1;
int counter  = 0;
int x = 1;
char big[0x1000];
const int i = 5;
struct A r;
COMPLEX a;
COMPLEX  x;
signed short s = -1;
short *q = &c;
short *l = &h;
char *m = &e;
int x = 7;
int c = a ^ b;
vector(4, float) f0 = {1., 2., 3., 4.};
vector(2, double) d0 = {1., 2.};
;
int a[2] = { -1, 0 };
int flag1;
int t1 = val;
int t2 = t1;
unsigned long long this = seed * 1103515245 + 12345;
unsigned long long int x;
long long ran;
long long int i;
struct baz x;
struct S *b = (struct S *)((char *)q + sizeof (int));
struct S *b = &((struct R *)q)->a;
struct g t;
struct pair p;
int k;
int end_bit;
struct S2848 arg;
const int *blist;
int list[32];
int *b = (int *) a;
struct c h;
struct S a;
struct S b = a;
unsigned T irslt = 1;
T ix = ixi;
unsigned T res;
int shift_half = sizeof (int) * __CHAR_BIT__ / 2;
long long int x = (3LL << shift_half) << shift_half;
long long int y = (5LL << shift_half) << shift_half;
struct tiny x;
long x = va_arg (ap, long);
unsigned int x7;
char s[32] = { 'f', 'o', 'o', 'b', 'a', 'r', 0 };
int b;
long t = l;
int i=0;
int a;
int y;
unsigned short s;
char ar[STACK_SIZE/2];
struct rtx_def foo;
int i0 = 0;
int i1 = i0 + 1;
int i2 = i1 + 1;
int i3 = i2 + 1;
int i4 = i3 + 1;
int g = 6;
int i = c >> ~(~e | ~g);
char *a = "test";
char *b = a + 2;
register char c;
register char *ep = bp + n;
register char *sp;
int one = 1;
char s[2] = "";
char s[] = "x";
unsigned long long c = 1;
char buf[6];
int x = 80;
char x;
int mat[2][1];
int (*a)[1] = mat;
int det = 0;
struct b ad = {};
int *d;
Data DataList[4];
int i = 0;
int j = i;
const char a[][4] = {    { '1', '2', '3', '4' }, { '5' },    { '1', '2', '3', '4' }, { '5', '6' },    { '1', '2', '3', '4' }, { '5', '6', '7' },    { '1', '2', '3', '4' }, { '5', '6', '7', '8' },    { '9' }  };
int i = 2;
int j = 0;
char a[][4] = {    { '1', '2', '3', '4' }, { '5' },    { '1', '2', '3', '4' }, { '5', '6' },    { '1', '2', '3', '4' }, { '5', '6', '7' },    { '1', '2', '3', '4' }, { '5', '6', '7', '8' },    { '9' }  };
int i = 1;
int i = 4;
const struct MemArrays ma[] = {    { { '1', '2', '3', '4' }, { '5' } },    { { '1', '2', '3', '4' }, { '5', '6' } },    { { '1', '2', '3', '4' }, { '5', '6' } },    { { '1', '2', '3', '4' }, { '5', '6', '7' } },    { { '1', '2', '3', '4' }, { '5', '6', '7', '8' } },    { { '9' }, { '\0' } }  };
struct MemArrays ma[] = {    { { '1', '2', '3', '4' }, { '5' } },    { { '1', '2', '3', '4' }, { '5', '6' } },    { { '1', '2', '3', '4' }, { '5', '6' } },    { { '1', '2', '3', '4' }, { '5', '6', '7' } },    { { '1', '2', '3', '4' }, { '5', '6', '7', '8' } },    { { '9' }, { '\0' } }  };
const union UnionMemberArrays clu = {    { { '1', '2', '3', '4' }, { '5', '6' } }  };
union UnionMemberArrays lvu = {    { { '1', '2', '3', '4' }, { '5', '6', '7' } }  };
unsigned x = 0x80000000;
double x = 1.0;
double y = 2.0;
struct C c = { 0, 0, 0 };
struct E e[2] = { { 0, &e[1] }, { 1, 0 } };
unsigned long retval;
_Bool f = 0;
unsigned int h;
char b[100];
int x = 37;
register int s1;
register void *base_addr = &&sim_base_addr;
unsigned int x = vaddr_page % 0x100;
int size = sizeof (int);
int n = 0;
int x[n % 1000 + 1];
int e[1];
int count[7];
int extent[7];
int * dest;
const int * base;
int dim;
int n;
int len;
int result = 0;
int rdata[3];
int adata[9];
int dim = 2;
struct complex c;
unsigned int m;
int error;
char * tmp;
const char *p = in + 1;
char out[4];
int a = 0;
int *p;
struct delay_block *q = Timer_Queue.succ;
double darg;
int iarg;
int flag = 0;
unsigned e = 2;
unsigned timeout = 0;
int f = ~e / 7;
int f = 0;
struct A *r;
unsigned long a[40];
int k = i + 8;
char buf[7];
signed char e = ~d;
long long i = 1;
unsigned int u;
int i = -1;
int z = a > 0 ? a : -a;
long long x = z;
int z = 0;
unsigned short *tmp;
const char *const foo = "hello world";
char dst [64];
int z = sizeof (v4flt) / sizeof (float);
unsigned m = sizeof (v4flt) - 1;
float t = src[0][j];
char *cptr;
float e = (float) i + 11 * (float) i + (float) i + 12 * (float) i;
int *f1;
unsigned int a;
unsigned short b;
unsigned char x[8] = { 0x01, 0x01, 0x01, 0x01 };
volatile int k = v;
unsigned int exponent;
int addr;
char *e;
long int xx = *y & 255;
long int xx = *y & 65535;
short int xx = *y & 255;
long int y[] = {-1, 16000};
short int yw[] = {-1, 16000};
struct tmp tmp = {0x123, 0xFFF000FFF000FLL};
struct tmp2 tmp2 = {0xFFF000FFF000FLL, 0x123};
unsigned char a = 0;
unsigned int d = 3;
int (*x)(int, int) = rl_character_len;
unsigned long long y = -1ULL >> x;
long long arg0 = args[i];
long long arg1 = args[j];
volatile int a = 0;
volatile int b = -INT_MAX;
char c = 'c';
const int a[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };
int c = 2;
int x;
int a = 1;
int y = 0;
const int *p = &x;
unsigned long *scan_fp_;
int n_uses;
struct du_chain *last;
struct du_chain du1 = { 0, 0 };
struct du_chain du0 = { &du1, 1 };
int c;
long j = 0x40000000;
int p[4] = { 16, 32, 64, 128 };
int q[4] = { 8, 4, 2, 1 };
long long f = e;
unsigned int tmp = (b[i] * 0xaf286bcbULL) >> 32;
int op = ops[j];
int tmp = x;
double d;
unsigned short n = 0;
unsigned short org_g;
const char d = 0;
const char c = 0;
unsigned int n = x;
unsigned int u = 32;
short r = *a;
unsigned long long i;
WorkEntrySType *workSpPtr;
ShrPcPteSType *ptePtr;
int ret = 0;
struct S t = { 0, -3161L };
PgHdr *pTail;
PgHdr a[5];
PgHdr *p;
st *next = 0;
int nIndx;
unsigned long o;
int *p = &i;
double x = -0.0;
double y;
int *i[7][5] = { { 0 } };
int **j[1][1];
int t1;
int *t2 = 0;
int *const *t3[] = {	      0, 0, 0, 0, 0, 0, 0, 0, 0, &t2, 0, 0, &t2, &t2, &t2,	      &t2, &t2, 0, 0, 0, 0, 0, 0, 0, &t2, 0, 0, 0, 0, 0, 0,	      0, 0, 0, 0, &t2, 0, 0, 0, 0, 0, 0, 0, &t2, &t2,	      &t2, &t2, &t2, 0, 0, 0, 0, 0, 0, 0, &t2, 0, 0, 0,	      &t2, 0, 0, 0, &t2, 0, &t2, 0, 0, &t2, 0, 0, 0, 0,	      0, &t2, 0, 0, 0, 0, &t2, &t2, 0, 0, 0, 0, &t2, 0,	      0, 0, 0, 0, 0, 0, &t2, 0, 0, 0, 0, 0, &t2, 0, 0, 0,	      &t2, &t2	    };
int *const **t4[] = {&t3[0]};
int t5;
int *t6[6] = {&d, &d};
int *t7[] = {0};
int t8[5] = {0};
int *const *t9 = &t6[0];
int *const **t10 = &t9;
unsigned x;
int o;
double i;
double o;
int l = 0;
int k = 0;
int *k = &h;
volatile unsigned char a = 1;
long long b = 0x80000000L;
int c = -((int)(-b) - (-0x7fffffff * a));
long long i;
unsigned i;
struct a i = {0, 5};
const int m = 0;
int v = f;
char *str = "abcdefghijkl";
signed char j;
unsigned char k;
char title[] = "foo and stuff\n";
int a=10;
test *p=(test *)&a;
unsigned long long a = x / y;
unsigned long long b = x % y;
unsigned long l;
char buf[100];
int fail_count = 0;
unsigned long tlen;
unsigned long e = 1000000000 / 460800 * test_length;
io *iop = i;
double d = -12.0;
long l = (d > 10000) ? (unsigned long) d : (long) d;
_Bool c = a != b;
char d = x[0];
int c = d;
const char c[] = { 0x54, 0x87 };
struct R r;
struct S o = x;
long winds = 0;
int cnt = 0;
enum e x = a;
int ir[4] = {0,1,2,3};
short b;
void *q = p > &c ? p : &c;
void *q = p < &c ? &c < &d ? &d : &c : p;
void *q = p < &c ? p : &c;
void *q = p > &c ? &c > &d ? &d : &c : p;
char *p0 = &a;
char *p1 = &b;
char *p4 = p2 < p0 ? p2 : p0;
char *p5 = p3 < p1 ? p3 : p1;
struct S ret;
char *p = &r;
unsigned long long a;
int y = INT_MIN;
struct S f = { };
struct a k = {};
_Bool a = d > 1;
float ping;
char *p;
int dev_zero;
long dx[VLEN+1];
long dy[VLEN+1];
long s1[VLEN];
long size;
char type;
int integer_size;
struct A a;
struct B b;
long l = ((a + win) - b);
long tmp = ++level;
long tmp = level;
struct S s = { 1, 2, 3, 4 };
void **w = u;
void *t[] = { u[2], u[4] };
int s[] = { 7, 8, 9, 10, 11, 12 };
int ae = 0;
struct c w;
struct c *const ar = &w;
unsigned long long uv = 0x1000000001ULL;
struct rtattr *attr = rta[i - 1];
struct rtattr rt[2];
struct rtattr *rta[14];
int f2;
union U1 f = {0x4030201};
int n=2;
double x[n];
int *t;
struct f f;
float *q = (float *)p;
int *i = 0;
float f = 1.0;
int **p;
int stereo1;
char *q;
int num = 0;
int I;
float F;
struct B b = { .a.j = 5 };
struct C c = { .a.j = 5 };
struct D d = { .a.j = 5 };
double c;
int d;
int r;
struct X x;
unsigned char cy;
unsigned short sy;
unsigned int iy;
unsigned long ly;
unsigned long long Ly;
int a = x->c3;
const int b = y->a1 >> 9;
const unsigned long c = y->a2;
int d = a;
struct C b;
float x[4];
float temp;
__int128 v = x & (((__int128) -1 << 63) | 0x7ff);
long long v = x & (((long long) -1 << 31) | 0x7ff);
unsigned long long r = 0x8000000000000001ull;
char d = a;
unsigned long val = 1;
unsigned int x = 2;
unsigned int y = (0U - x / 2) / 2;
char *formatc;
char *f = "0123456789abcdef";
int a[40];
__complex__ double c;
struct T *p = s;
double sum = 0;
int iNbr = 1;
int test = 0;
int v = 0;
char x = '\0';
int b=INT_MIN;
int b=INT_MIN+1;
int b=INT_MAX;
int b=-1;
long double x = 1.0;
unsigned int y = (unsigned int)INT_MIN;
double value;
int a = ~x;
int b = 0x0332F5C8;
int z;
int y = 2;
int tot = 0;
signed char m[256];
signed char n[256];
unsigned int x;
unsigned char index;
unsigned char index = 0;
short *l = &f;
int ch;
struct S *p;
unsigned int r;
unsigned int *c = s->c;
unsigned int i;
struct S s;
unsigned int *c = s.c;
unsigned int s;
long int srcp1 = (long int) &a;
long int srcp2 = (long int) &b;
unsigned long int a0;
unsigned long int b0;
long int srcp1 = (long int) s1;
long int srcp2 = (long int) s2;
int x = a;
void * temp;
int hicount = 0;
unsigned char *c;
char *str = "\x7f\xff";
int b = 0x1234;
int timeout = 0;
unsigned int x = (short)y;
int z = 0x1234;
unsigned int z = 0x1234;
int y = 0x1234;
int z = INT_MIN;
unsigned int y = 0x1234;
unsigned int z = (unsigned int)INT_MIN;
int dummy;
char *bp = buf;
struct spurious dummy;
struct S t = { 0, -1220975898975746LL };
signed char d;
signed char f = e ^ b;
volatile int g = (int) f;
int (*f) (double, int) = fp;
unsigned char c[32] = { 0 };
unsigned char *p = d + i;
int x = 0xff;
int y = *++p;
const struct T t = { 0, 0, (void *) 0, 0 };
struct V *u;
void *v;
struct V *c;
unsigned int one = 1;
struct A d;
unsigned short int x = 0;
unsigned short int y = 10;
int d = x[i];
unsigned long a = (*p++) >> 24;
unsigned long x = 0x80000000UL;
const char lca[2][3] = { "12" };
const char lcb[2][3] = { { '1', '2', '3', }, { '4' } };
char lva[2][3] = { "123" };
char lvb[2][3] = { { '1', '2', '3', }, { '4', '5' } };
unsigned int regno;
int t;
int g = -1L;
int h = ~d;
unsigned bno = *bit_no;
bitmap_element *elt1;
int*p=l;
int x = 0 % a++;
long long r;
unsigned short z = 0;
int rval;
int j = 1;

  TEST(0);
  TEST(1);
  TEST(2);
  TEST(3);
  TEST(4);
  TEST(5);
  TEST(6);
  TEST(7);
  TEST(8);
  TEST(9);

  if (0)
    abort ();
  exit (0);
}
