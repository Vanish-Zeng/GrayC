Reported here: https://git.frama-c.com/pub/frama-c/-/issues/2576 

Original code before fuzzing didn't crash
[kernel] Parsing /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c (with preprocessing)
[kernel:typing:implicit-function-declaration] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:12: Warning: 
  Calling undeclared function alloca. Old style K&R code?
[kernel:typing:implicit-function-declaration] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:13: Warning: 
  Calling undeclared function memset. Old style K&R code?
[kernel:typing:implicit-conv-void-ptr] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:14: Warning: 
  implicit conversion from void * to char (*)[N]
[kernel:typing:implicit-function-declaration] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:16: Warning: 
  Calling undeclared function abort. Old style K&R code?
[kernel:typing:implicit-function-declaration] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:17: Warning: 
  Calling undeclared function exit. Old style K&R code?
[eva:builtins:override] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:12: Warning: 
  The builtin alloca will not be used for function alloca of incompatible type.
  (got: int (int x_0)).
[kernel:annot:missing-spec] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:7: Warning: 
  Neither code nor specification for function memset, generating default assigns from the prototype
[eva] Analyzing a complete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  N âˆˆ {1}
[kernel:annot:missing-spec] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:12: Warning: 
  Neither code nor specification for function alloca, generating default assigns from the prototype
[eva] using specification for function alloca
[eva:invalid-assigns] /home/user42/directed-compiler-fuzzing-code/scripts/8-crash-testing/input/setA/A_pr22061-1.c:13: 
  Completely invalid destination for assigns clause *((char *)x_0 + (0 ..)).
  Ignoring.
[eva] done for function main
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  NON TERMINATING FUNCTION
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  1 function analyzed (out of 3): 33% coverage.
  In this function, 5 statements reached (out of 10): 50% coverage.
  ----------------------------------------------------------------------------
  Some errors and warnings have been raised during the analysis:
    by the Eva analyzer:      0 errors    1 warning
    by the Frama-C kernel:    0 errors    7 warnings
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
     
ORIGINAL CODE:
     1	/* corpus/pr22061-1.c */
     2	/* { dg-require-effective-target alloca } */
     3	int N = 1;
     4	void foo() {} /* Necessary to trigger the original ICE.  */
     5	void bar (char a[2][N]) { a[1][0] = N; }
     6	int
     7	main (void)
     8	{
     9	  void *x;
    10	
    11	  N = 4;
    12	  x = alloca (2 * N);
    13	  memset (x, 0, 2 * N);
    14	  bar (x);
    15	  if (N[(char *) x] != N)
    16	    { abort (); }
    17	  exit (0);
    18	}

FUZZED:
     1	/* corpus/pr22061-1.c */
     2	/* { dg-require-effective-target alloca } */
     3	int N = 1;
     4	void foo() {} /* Necessary to trigger the original ICE.  */
     5	void bar (char a[2][N]) { ; }
     6	int
     7	main (void)
     8	{
     9	  void *x;
    10	
    11	  
    12	N = 4;
    13	N = 4;
    14	;
    15	  ;
    16	  memset (x, 0, 2 * N);
    17	  bar (x);
    18	  if (N[(char *) x] != N)
    19	    { abort (); }
    20	  exit (0);
    21	}
