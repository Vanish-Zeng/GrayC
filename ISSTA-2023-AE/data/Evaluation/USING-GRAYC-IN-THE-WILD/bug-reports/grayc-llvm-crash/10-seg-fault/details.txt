With -Os only in llvm 13,14 and 15. Looks like a reported bug: 
https://github.com/llvm/llvm-project/issues/49081
Bug 18 in our table 26/08/2022

user42@srg08:~/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault$ /home/user42/data/llvm-csmith-14/llvm-install/usr/local/bin/clang-14 -Os fuzzer-file-10430.c
fuzzer-file-10430.c:1:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
a(b, c) int *b; {
^
fuzzer-file-10430.c:3:7: warning: multiple unsequenced modifications to 'b' [-Wunsequenced]
    *b++ = *b++ % *b++ - *b--;
      ^      ~~
fuzzer-file-10430.c:4:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
clang-14: /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Casting.h:269: typename llvm::cast_retty<X, Y*>::ret_type llvm::cast(Y*) [with X = llvm::VPBasicBlock; Y = llvm::VPBlockBase; typename llvm::cast_retty<X, Y*>::ret_type = llvm::VPBasicBlock*]: Assertion `isa<X>(Val) && "cast<Ty>() argument of incompatible type!"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/user42/data/llvm-csmith-14/llvm-install/usr/local/bin/clang-14 -cc1 -triple x86_64-unknown-linux-gnu -emit-obj --mrelax-relocations -disable-free -clear-ast-before-backend -main-file-name fuzzer-file-10430.c -mrelocation-model static -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fcoverage-compilation-dir=/home/user42/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault -resource-dir /home/user42/data/llvm-csmith-14/llvm-install/usr/local/lib/clang/14.0.0 -internal-isystem /home/user42/data/llvm-csmith-14/llvm-install/usr/local/lib/clang/14.0.0/include -internal-isystem /usr/local/include -internal-isystem /usr/lib/gcc/x86_64-linux-gnu/11/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -Os -fdebug-compilation-dir=/home/user42/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault -ferror-limit 19 -fgnuc-version=4.2.1 -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/fuzzer-file-10430-0ec282.o -x c fuzzer-file-10430.c
1.	<eof> parser at end of file
2.	Optimizer
 #0 0x00005653af42bb1d llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Support/Unix/Signals.inc:569:3
 #1 0x00005653af429ad4 llvm::sys::RunSignalHandlers() /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Support/Signals.cpp:96:20
 #2 0x00005653af429c5e SignalHandler(int) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1
 #3 0x00007ff5643d2980 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12980)
 #4 0x00007ff562ffffb7 raise /build/glibc-S9d2JN/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:51:0
 #5 0x00007ff563001921 abort /build/glibc-S9d2JN/glibc-2.27/stdlib/abort.c:81:0
 #6 0x00007ff562ff148a __assert_fail_base /build/glibc-S9d2JN/glibc-2.27/assert/assert.c:89:0
 #7 0x00007ff562ff1502 (/lib/x86_64-linux-gnu/libc.so.6+0x30502)
 #8 0x00005653af5ef4d3 (/home/user42/data/llvm-csmith-14/llvm-install/usr/local/bin/clang-14+0x21f24d3)
 #9 0x00005653af639ca4 llvm::isa_impl_cl<llvm::VPBasicBlock, llvm::VPBlockBase const*>::doit(llvm::VPBlockBase const*) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:9104:3
#10 0x00005653af639ca4 llvm::isa_impl_wrap<llvm::VPBasicBlock, llvm::VPBlockBase const*, llvm::VPBlockBase const*>::doit(llvm::VPBlockBase const* const&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Casting.h:131:40
#11 0x00005653af639ca4 llvm::isa_impl_wrap<llvm::VPBasicBlock, llvm::VPBlockBase* const, llvm::VPBlockBase const*>::doit(llvm::VPBlockBase* const&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Casting.h:122:60
#12 0x00005653af639ca4 bool llvm::isa<llvm::VPBasicBlock, llvm::VPBlockBase*>(llvm::VPBlockBase* const&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Casting.h:143:74
#13 0x00005653af639ca4 llvm::cast_retty<llvm::VPBasicBlock, llvm::VPBlockBase*>::ret_type llvm::cast<llvm::VPBasicBlock, llvm::VPBlockBase>(llvm::VPBlockBase*) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Casting.h:269:3
#14 0x00005653af639ca4 llvm::LoopVectorizationPlanner::buildVPlanWithVPRecipes(llvm::VFRange&, llvm::SmallPtrSetImpl<llvm::Instruction*>&, llvm::MapVector<llvm::Instruction*, llvm::Instruction*, llvm::DenseMap<llvm::Instruction*, unsigned int, llvm::DenseMapInfo<llvm::Instruction*, void>, llvm::detail::DenseMapPair<llvm::Instruction*, unsigned int> >, std::vector<std::pair<llvm::Instruction*, llvm::Instruction*>, std::allocator<std::pair<llvm::Instruction*, llvm::Instruction*> > > > const&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:9144:31
#15 0x00005653af641952 llvm::SmallVectorBase<unsigned int>::size() const /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallVector.h:70:32
#16 0x00005653af641952 std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> > const* llvm::SmallVectorTemplateCommon<std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >, void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >, false> >(llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >, false>*, std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> > const&, unsigned long) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallVector.h:217:32
#17 0x00005653af641952 llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >, false>::reserveForParamAndGetAddress(std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >&, unsigned long) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallVector.h:376:47
#18 0x00005653af641952 llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >, false>::push_back(std::unique_ptr<llvm::VPlan, std::default_delete<llvm::VPlan> >&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallVector.h:411:45
#19 0x00005653af641952 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:8913:21
#20 0x00005653af642162 llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:7856:27
#21 0x00005653af644270 llvm::LoopVectorizePass::processLoop(llvm::Loop*) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10400:58
#22 0x00005653af646795 llvm::SmallVectorBase<unsigned int>::empty() const /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallVector.h:73:47
#23 0x00005653af646795 llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo&, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AAResults&, llvm::AssumptionCache&, std::function<llvm::LoopAccessInfo const& (llvm::Loop&)>&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10654:25
#24 0x00005653af646e4e llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:10693:5
#25 0x00005653b04d68b2 llvm::detail::PassModel<llvm::Function, llvm::LoopVectorizePass, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:89:3
#26 0x00005653aec880ef llvm::SmallPtrSet<void*, 2u>::operator=(llvm::SmallPtrSet<void*, 2u>&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:488:21
#27 0x00005653aec880ef llvm::PreservedAnalyses::operator=(llvm::PreservedAnalyses&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:155:7
#28 0x00005653aec880ef llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:525:16
#29 0x00005653af730552 llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function> >, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:89:3
#30 0x00005653aec87813 llvm::SmallPtrSet<void*, 2u>::operator=(llvm::SmallPtrSet<void*, 2u>&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:488:21
#31 0x00005653aec87813 llvm::PreservedAnalyses::operator=(llvm::PreservedAnalyses&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:155:7
#32 0x00005653aec87813 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/IR/PassManager.cpp:128:32
#33 0x00005653af7311d2 llvm::detail::PassModel<llvm::Module, llvm::ModuleToFunctionPassAdaptor, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:89:3
#34 0x00005653aec85879 llvm::SmallPtrSet<void*, 2u>::operator=(llvm::SmallPtrSet<void*, 2u>&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:488:21
#35 0x00005653aec85879 llvm::PreservedAnalyses::operator=(llvm::PreservedAnalyses&&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:155:7
#36 0x00005653aec85879 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:525:16
#37 0x00005653af740e2e llvm::SmallPtrSetImplBase::isSmall() const /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:194:33
#38 0x00005653af740e2e llvm::SmallPtrSetImplBase::~SmallPtrSetImplBase() /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:82:17
#39 0x00005653af740e2e llvm::SmallPtrSetImpl<llvm::AnalysisKey*>::~SmallPtrSetImpl() /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:343:7
#40 0x00005653af740e2e llvm::SmallPtrSet<llvm::AnalysisKey*, 2u>::~SmallPtrSet() /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:449:7
#41 0x00005653af740e2e llvm::PreservedAnalyses::~PreservedAnalyses() /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/IR/PassManager.h:155:7
#42 0x00005653af740e2e (anonymous namespace)::EmitAssemblyHelper::RunOptimizationPipeline(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >&, std::unique_ptr<llvm::ToolOutputFile, std::default_delete<llvm::ToolOutputFile> >&) (.constprop.0) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:1494:10
#43 0x00005653af743790 RunCodegenPipeline /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:1503:23
#44 0x00005653af743790 EmitAssembly /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:1556:21
#45 0x00005653af743790 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:1719:27
#46 0x00005653b0475bb5 std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >::~unique_ptr() /usr/include/c++/10/bits/unique_ptr.h:360:12
#47 0x00005653b0475bb5 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:370:24
#48 0x00005653b0ff2e29 clang::ParseAST(clang::Sema&, bool, bool) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/Parse/ParseAST.cpp:171:34
#49 0x00005653afe08019 clang::FrontendAction::Execute() /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/Frontend/FrontendAction.cpp:967:21
#50 0x00005653afda5736 llvm::Error::setChecked(bool) /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Error.h:304:22
#51 0x00005653afda5736 llvm::Error::operator bool() /home/user42/data/llvm-csmith-14/llvm-project/llvm/include/llvm/Support/Error.h:236:15
#52 0x00005653afda5736 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:1030:42
#53 0x00005653afebe758 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) /home/user42/data/llvm-csmith-14/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp:262:32
#54 0x00005653ae04c1a5 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) /home/user42/data/llvm-csmith-14/llvm-project/clang/tools/driver/cc1_main.cpp:246:40
#55 0x00005653ae049386 ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&) /home/user42/data/llvm-csmith-14/llvm-project/clang/tools/driver/driver.cpp:317:20
#56 0x00005653adfc875c main /home/user42/data/llvm-csmith-14/llvm-project/clang/tools/driver/driver.cpp:388:26
#57 0x00007ff562fe2bf7 __libc_start_main /build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c:344:0
#58 0x00005653ae04876a _start (/home/user42/data/llvm-csmith-14/llvm-install/usr/local/bin/clang-14+0xc4b76a)
clang-14: error: unable to execute command: Aborted
clang-14: error: clang frontend command failed due to signal (use -v to see invocation)
clang version 14.0.0 (https://github.com/llvm/llvm-project.git 16fd5c278488b3d3275afc381a00ba0b51b070ee)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/user42/data/llvm-csmith-14/llvm-install/usr/local/bin
clang-14: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang-14: note: diagnostic msg: /tmp/fuzzer-file-10430-3bedcf.c
clang-14: note: diagnostic msg: /tmp/fuzzer-file-10430-3bedcf.sh
clang-14: note: diagnostic msg: 

********************


user42@srg08:~/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault$ clang-15 -Os fuzzer-file-10430.c
fuzzer-file-10430.c:1:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
a(b, c) int *b; {
^
fuzzer-file-10430.c:3:7: warning: multiple unsequenced modifications to 'b' [-Wunsequenced]
    *b++ = *b++ % *b++ - *b--;
      ^      ~~
fuzzer-file-10430.c:4:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /usr/lib/llvm-15/bin/clang -cc1 -triple x86_64-pc-linux-gnu -emit-obj --mrelax-relocations -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name fuzzer-file-10430.c -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=none -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -mllvm -treat-scalable-fixed-error-as-warning -debugger-tuning=gdb -fcoverage-compilation-dir=/home/user42/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault -resource-dir /usr/lib/llvm-15/lib/clang/15.0.0 -internal-isystem /usr/lib/llvm-15/lib/clang/15.0.0/include -internal-isystem /usr/local/include -internal-isystem /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -Os -fdebug-compilation-dir=/home/user42/directed-compiler-fuzzing-code/scripts/9-reduce-bugs/crash-clang/10-seg-fault -ferror-limit 19 -fgnuc-version=4.2.1 -fcolor-diagnostics -vectorize-loops -vectorize-slp -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -o /tmp/fuzzer-file-10430-47cdf0.o -x c fuzzer-file-10430.c
1.	<eof> parser at end of file
2.	Optimizer
 #0 0x00007fccc002d141 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xe43141)
 #1 0x00007fccc002ae9e llvm::sys::RunSignalHandlers() (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xe40e9e)
 #2 0x00007fccc002d66b (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xe4366b)
 #3 0x00007fccc93ac980 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12980)
 #4 0x00007fccc11d9197 (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fef197)
 #5 0x00007fccc11c498a llvm::LoopVectorizationPlanner::buildVPlanWithVPRecipes(llvm::VFRange&, llvm::SmallPtrSetImpl<llvm::Instruction*>&, llvm::MapVector<llvm::Instruction*, llvm::Instruction*, llvm::DenseMap<llvm::Instruction*, unsigned int, llvm::DenseMapInfo<llvm::Instruction*, void>, llvm::detail::DenseMapPair<llvm::Instruction*, unsigned int> >, std::vector<std::pair<llvm::Instruction*, llvm::Instruction*>, std::allocator<std::pair<llvm::Instruction*, llvm::Instruction*> > > > const&) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fda98a)
 #6 0x00007fccc11bb528 llvm::LoopVectorizationPlanner::buildVPlansWithVPRecipes(llvm::ElementCount, llvm::ElementCount) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fd1528)
 #7 0x00007fccc11ba805 llvm::LoopVectorizationPlanner::plan(llvm::ElementCount, unsigned int) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fd0805)
 #8 0x00007fccc11cc6df llvm::LoopVectorizePass::processLoop(llvm::Loop*) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fe26df)
 #9 0x00007fccc11d0509 llvm::LoopVectorizePass::runImpl(llvm::Function&, llvm::ScalarEvolution&, llvm::LoopInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::BlockFrequencyInfo&, llvm::TargetLibraryInfo*, llvm::DemandedBits&, llvm::AAResults&, llvm::AssumptionCache&, std::function<llvm::LoopAccessInfo const& (llvm::Loop&)>&, llvm::OptimizationRemarkEmitter&, llvm::ProfileSummaryInfo*) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fe6509)
#10 0x00007fccc11d0a42 llvm::LoopVectorizePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x1fe6a42)
#11 0x00007fccc2b90d4d (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x39a6d4d)
#12 0x00007fccc019c44e llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function> >::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xfb244e)
#13 0x00007fccc1da818d (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x2bbe18d)
#14 0x00007fccc01a0371 llvm::ModuleToFunctionPassAdaptor::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xfb6371)
#15 0x00007fccc1da7fbd (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0x2bbdfbd)
#16 0x00007fccc019b01e llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module> >::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/usr/lib/x86_64-linux-gnu/libLLVM-15.so.1+0xfb101e)
#17 0x00007fccc73a3e85 (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x187ee85)
#18 0x00007fccc7398d91 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x1873d91)
#19 0x00007fccc76de971 (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x1bb9971)
#20 0x00007fccc6530c04 clang::ParseAST(clang::Sema&, bool, bool) (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0xa0bc04)
#21 0x00007fccc76dacc1 clang::CodeGenAction::ExecuteAction() (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x1bb5cc1)
#22 0x00007fccc807fdd7 clang::FrontendAction::Execute() (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x255add7)
#23 0x00007fccc7fd6e46 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x24b1e46)
#24 0x00007fccc80f994a clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/usr/lib/x86_64-linux-gnu/libclang-cpp.so.15+0x25d494a)
#25 0x00000000004132ea cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/usr/lib/llvm-15/bin/clang+0x4132ea)
#26 0x000000000041154b (/usr/lib/llvm-15/bin/clang+0x41154b)
#27 0x0000000000411397 main (/usr/lib/llvm-15/bin/clang+0x411397)
#28 0x00007fccbe457bf7 __libc_start_main /build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c:344:0
#29 0x000000000040e44a _start (/usr/lib/llvm-15/bin/clang+0x40e44a)
clang: error: unable to execute command: Segmentation fault
clang: error: clang frontend command failed due to signal (use -v to see invocation)
Ubuntu clang version 15.0.0-++20220213091430+bf7f8d6fa6f4-1~exp1~20220213091521.299
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin
clang: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang: note: diagnostic msg: /tmp/fuzzer-file-10430-015d81.c
clang: note: diagnostic msg: /tmp/fuzzer-file-10430-015d81.sh
clang: note: diagnostic msg: 

********************



/home/user42/data/llvm-csmith-14/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
Last point before carash 9104:
  9001	  // ---------------------------------------------------------------------------
  9002	  // Build initial VPlan: Scan the body of the loop in a topological order to
  9003	  // visit each basic block after having visited its predecessor basic blocks.
  9004	  // ---------------------------------------------------------------------------
  9005	
  9006	  // Create initial VPlan skeleton, with separate header and latch blocks.
  9007	  VPBasicBlock *HeaderVPBB = new VPBasicBlock();
  9008	  VPBasicBlock *LatchVPBB = new VPBasicBlock("vector.latch");
  9009	  VPBlockUtils::insertBlockAfter(LatchVPBB, HeaderVPBB);
  9010	  auto *TopRegion = new VPRegionBlock(HeaderVPBB, LatchVPBB, "vector loop");
  9011	  auto Plan = std::make_unique<VPlan>(TopRegion);
  9012	
  9013	  Instruction *DLInst =
  9014	      getDebugLocFromInstOrOperands(Legal->getPrimaryInduction());
  9015	  addCanonicalIVRecipes(*Plan, Legal->getWidestInductionType(),
  9016	                        DLInst ? DLInst->getDebugLoc() : DebugLoc(),
  9017	                        !CM.foldTailByMasking(), false);
  9018	
  9019	  // Scan the body of the loop in a topological order to visit each basic block
  9020	  // after having visited its predecessor basic blocks.
  9021	  LoopBlocksDFS DFS(OrigLoop);
  9022	  DFS.perform(LI);
  9023	
  9024	  VPBasicBlock *VPBB = HeaderVPBB;
  9025	  SmallVector<VPWidenIntOrFpInductionRecipe *> InductionsToMove;
  9026	  for (BasicBlock *BB : make_range(DFS.beginRPO(), DFS.endRPO())) {
  9027	    // Relevant instructions from basic block BB will be grouped into VPRecipe
  9028	    // ingredients and fill a new VPBasicBlock.
  9029	    unsigned VPBBsForBB = 0;
  9030	    VPBB->setName(BB->getName());
  9031	    Builder.setInsertPoint(VPBB);
  9032	
  9033	    // Introduce each ingredient into VPlan.
  9034	    // TODO: Model and preserve debug instrinsics in VPlan.
  9035	    for (Instruction &I : BB->instructionsWithoutDebug()) {
  9036	      Instruction *Instr = &I;
  9037	
  9038	      // First filter out irrelevant instructions, to ensure no recipes are
  9039	      // built for them.
  9040	      if (isa<BranchInst>(Instr) || DeadInstructions.count(Instr))
  9041	        continue;
  9042	
  9043	      SmallVector<VPValue *, 4> Operands;
  9044	      auto *Phi = dyn_cast<PHINode>(Instr);
  9045	      if (Phi && Phi->getParent() == OrigLoop->getHeader()) {
  9046	        Operands.push_back(Plan->getOrAddVPValue(
  9047	            Phi->getIncomingValueForBlock(OrigLoop->getLoopPreheader())));
  9048	      } else {
  9049	        auto OpRange = Plan->mapToVPValues(Instr->operands());
  9050	        Operands = {OpRange.begin(), OpRange.end()};
  9051	      }
  9052	      if (auto RecipeOrValue = RecipeBuilder.tryToCreateWidenRecipe(
  9053	              Instr, Operands, Range, Plan)) {
  9054	        // If Instr can be simplified to an existing VPValue, use it.
  9055	        if (RecipeOrValue.is<VPValue *>()) {
  9056	          auto *VPV = RecipeOrValue.get<VPValue *>();
  9057	          Plan->addVPValue(Instr, VPV);
  9058	          // If the re-used value is a recipe, register the recipe for the
  9059	          // instruction, in case the recipe for Instr needs to be recorded.
  9060	          if (auto *R = dyn_cast_or_null<VPRecipeBase>(VPV->getDef()))
  9061	            RecipeBuilder.setRecipe(Instr, R);
  9062	          continue;
  9063	        }
  9064	        // Otherwise, add the new recipe.
  9065	        VPRecipeBase *Recipe = RecipeOrValue.get<VPRecipeBase *>();
  9066	        for (auto *Def : Recipe->definedValues()) {
  9067	          auto *UV = Def->getUnderlyingValue();
  9068	          Plan->addVPValue(UV, Def);
  9069	        }
  9070	
  9071	        if (isa<VPWidenIntOrFpInductionRecipe>(Recipe) &&
  9072	            HeaderVPBB->getFirstNonPhi() != VPBB->end()) {
  9073	          // Keep track of VPWidenIntOrFpInductionRecipes not in the phi section
  9074	          // of the header block. That can happen for truncates of induction
  9075	          // variables. Those recipes are moved to the phi section of the header
  9076	          // block after applying SinkAfter, which relies on the original
  9077	          // position of the trunc.
  9078	          assert(isa<TruncInst>(Instr));
  9079	          InductionsToMove.push_back(
  9080	              cast<VPWidenIntOrFpInductionRecipe>(Recipe));
  9081	        }
  9082	        RecipeBuilder.setRecipe(Instr, Recipe);
  9083	        VPBB->appendRecipe(Recipe);
  9084	        continue;
  9085	      }
  9086	
  9087	      // Otherwise, if all widening options failed, Instruction is to be
  9088	      // replicated. This may create a successor for VPBB.
  9089	      VPBasicBlock *NextVPBB =
  9090	          RecipeBuilder.handleReplication(Instr, Range, VPBB, Plan);
  9091	      if (NextVPBB != VPBB) {
  9092	        VPBB = NextVPBB;
  9093	        VPBB->setName(BB->hasName() ? BB->getName() + "." + Twine(VPBBsForBB++)
  9094	                                    : "");
  9095	      }
  9096	    }
  9097	
  9098	    VPBlockUtils::insertBlockAfter(new VPBasicBlock(), VPBB);
  9099	    VPBB = cast<VPBasicBlock>(VPBB->getSingleSuccessor());
  9100	  }
  9101	
  9102	  // Fold the last, empty block into its predecessor.
  9103	  VPBB = VPBlockUtils::tryToMergeBlockIntoPredecessor(VPBB);
  9104	  assert(VPBB && "expected to fold last (empty) block");
user42@srg08:~/directed-compiler-fuzzing-code/scripts/9-reduce-bug
